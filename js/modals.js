// DEBUG: Ellen≈ërizz√ºk, hogy a f√ºggv√©nyek el√©rhet≈ëek-e
console.log('‚úÖ modals.js bet√∂lt≈ëd√∂tt');

// Elad√°s modal bez√°r√°sa
function closeEditModal() {
  console.log('üîí closeEditModal megh√≠vva');
  const modal = document.getElementById('editSaleModal');
  if (modal) {
    modal.style.display = 'none';
    console.log('‚úÖ Modal elrejtve');
  } else {
    console.error('‚ùå editSaleModal nem tal√°lhat√≥');
  }
  currentCarIdForSale = null;
}

// Elad√°s modal megnyit√°sa - JAV√çTOTT VERZI√ì
function openSoldModal(carId) {
  console.log('üöó openSoldModal megh√≠vva, carId:', carId);
  
  const car = allCars.find(c => c.id === carId);
  if (!car) {
    console.error('‚ùå Aut√≥ nem tal√°lhat√≥:', carId);
    return;
  }

  currentCarIdForSale = carId;
  
  // Modal elem lek√©r√©se
  const modal = document.getElementById('editSaleModal');
  if (!modal) {
    console.error('‚ùå editSaleModal elem nem tal√°lhat√≥');
    return;
  }
  
  // K√©p be√°ll√≠t√°sa
  const carImage = document.getElementById('editCarImage');
  if (carImage) {
    const imageUrl = getImageUrl(car.image_url || car.image_data_url);
    if (imageUrl && !imageUrl.includes('undefined')) {
      carImage.src = imageUrl;
      carImage.style.display = 'block';
      console.log('‚úÖ K√©p be√°ll√≠tva:', imageUrl);
    } else {
      carImage.style.display = 'none';
      console.log('‚ÑπÔ∏è Nincs k√©p');
    }
  }
  
  // Aut√≥ adatok
  const modelElement = document.getElementById('editCarModel');
  const purchasePriceElement = document.getElementById('editPurchasePrice');
  const currentPriceElement = document.getElementById('editCurrentPrice');
  
  if (modelElement) modelElement.textContent = car.Model || 'Ismeretlen modell';
  if (purchasePriceElement) purchasePriceElement.textContent = car.VetelArFormatted ? car.VetelArFormatted + ' $' : 'Nincs megadva';
  if (currentPriceElement) currentPriceElement.textContent = car.EladasiArFormatted ? car.EladasiArFormatted + ' $' : 'Nincs megadva';
  
  // Elad√°si √°r input
  const salePriceInput = document.getElementById('editSalePrice');
  if (salePriceInput) {
    salePriceInput.value = car.EladasiArFormatted || '';
  }
  
  // Elad√°s t√≠pus alaphelyzetbe √°ll√≠t√°sa
  const kpRadio = document.getElementById('saleTypeKp');
  const normalRadio = document.getElementById('saleTypeNormal');
  if (kpRadio) kpRadio.checked = true;
  if (normalRadio) normalRadio.checked = false;
  
  // Profit sz√°mol√≥ friss√≠t√©se
  updateProfitCalculator();
  
  // Modal megjelen√≠t√©se - M√ìDOS√çTOTT
  modal.style.display = 'block';
  modal.style.opacity = '1';
  modal.style.visibility = 'visible';
  
  console.log('‚úÖ Modal megjelen√≠tve');
  
  // Input f√≥kusz
  setTimeout(() => {
    if (salePriceInput) {
      salePriceInput.focus();
      console.log('‚úÖ Input f√≥kusz be√°ll√≠tva');
    }
  }, 300);
}

// Profit sz√°mol√≥ friss√≠t√©se - M√ìDOS√çTOTT
function updateProfitCalculator() {
  const salePriceInput = document.getElementById('editSalePrice').value.replace(/[^\d]/g, '');
  const salePrice = salePriceInput ? parseInt(salePriceInput) : 0;
  const saleType = document.querySelector('input[name="saleType"]:checked').value;
  
  const car = allCars.find(c => c.id === currentCarIdForSale);
  const purchasePrice = car.VetelAr || 0;
  
  const profitCalc = document.getElementById('profitCalc');
  
  if (salePrice > 0 && purchasePrice > 0) {
    // Ad√≥ sz√°m√≠t√°s: norm√°l elad√°s eset√©n 7.5% ad√≥
    const taxRate = saleType === 'normal' ? 0.075 : 0;
    const taxAmount = Math.round(salePrice * taxRate);
    const netSalePrice = salePrice - taxAmount;
    const profit = netSalePrice - purchasePrice;
    
    const profitFormatted = new Intl.NumberFormat('hu-HU').format(Math.abs(profit));
    const profitClass = profit >= 0 ? 'profit-positive' : 'profit-negative';
    
    document.getElementById('calcPurchase').textContent = new Intl.NumberFormat('hu-HU').format(purchasePrice) + ' $';
    document.getElementById('calcSale').textContent = new Intl.NumberFormat('hu-HU').format(salePrice) + ' $';
    
    // Ad√≥ megjelen√≠t√©se, ha van
    if (taxAmount > 0) {
      document.getElementById('calcTax').textContent = new Intl.NumberFormat('hu-HU').format(taxAmount) + ' $';
      document.getElementById('calcTax').style.display = 'block';
      document.getElementById('taxLabel').style.display = 'block';
      document.getElementById('calcNetSale').textContent = new Intl.NumberFormat('hu-HU').format(netSalePrice) + ' $';
      document.getElementById('calcNetSale').style.display = 'block';
      document.getElementById('netSaleLabel').style.display = 'block';
    } else {
      document.getElementById('calcTax').style.display = 'none';
      document.getElementById('taxLabel').style.display = 'none';
      document.getElementById('calcNetSale').style.display = 'none';
      document.getElementById('netSaleLabel').style.display = 'none';
    }
    
    document.getElementById('calcProfit').textContent = (profit >= 0 ? '+' : '-') + profitFormatted + ' $';
    document.getElementById('calcProfit').className = profitClass;
    
    profitCalc.style.display = 'block';
  } else {
    profitCalc.style.display = 'none';
  }
}

async function confirmSaleWithEdit() {
  if (!currentCarIdForSale || !currentUser) return;

  const salePriceInput = document.getElementById('editSalePrice').value.replace(/[^\d]/g, '');
  const salePriceValue = salePriceInput ? parseInt(salePriceInput) : null;
  const saleType = document.querySelector('input[name="saleType"]:checked').value;

  if (salePriceValue !== null && isNaN(salePriceValue)) {
    showMessage('√ârv√©nyes sz√°mot adj meg!', 'error');
    return;
  }

  const car = allCars.find(c => c.id === currentCarIdForSale);
  
  // V√©tel√°r ellen≈ërz√©se
  if (salePriceValue !== null && car.VetelAr && salePriceValue < car.VetelAr) {
    const confirmLoss = confirm(`‚ö†Ô∏è Figyelem! Az elad√°si √°r (${new Intl.NumberFormat('hu-HU').format(salePriceValue)} $) alacsonyabb a v√©tel√°rn√°l (${new Intl.NumberFormat('hu-HU').format(car.VetelAr)} $).\n\nBiztosan folytatod?`);
    if (!confirmLoss) return;
  }

  // Ad√≥ sz√°m√≠t√°s
  const taxRate = saleType === 'normal' ? 0.075 : 0;
  const taxAmount = salePriceValue ? Math.round(salePriceValue * taxRate) : 0;
  const netSalePrice = salePriceValue ? salePriceValue - taxAmount : null;

  const { error } = await supabase
    .from('cars')
    .update({ 
      sold: true,
      sold_by: currentUser.tagName,
      sold_at: new Date().toISOString(),
      sale_price: salePriceValue,
      sale_type: saleType, // Elad√°s t√≠pus ment√©se
      tax_amount: taxAmount, // Ad√≥ √∂sszege
      net_sale_price: netSalePrice // Nett√≥ elad√°si √°r
    })
    .eq('id', currentCarIdForSale);

  if (error) {
    showMessage('Hiba: ' + error.message, 'error');
  } else {
    const priceInfo = salePriceValue ? ` (${new Intl.NumberFormat('hu-HU').format(salePriceValue)} $)` : '';
    const taxInfo = taxAmount > 0 ? ` - Ad√≥: ${new Intl.NumberFormat('hu-HU').format(taxAmount)} $` : '';
    const saleTypeText = saleType === 'kp' ? 'K√©szp√©nz' : 'Norm√°l';
    
    showMessage(`‚úÖ Aut√≥ eladva${priceInfo}${taxInfo} (${saleTypeText} - Elad√≥: ${currentUser.tagName})`, 'success');
    await loadCars(true);
    loadStats();
  }

  closeEditModal();
}
// === JELSZ√ìV√ÅLTOZTAT√ÅS FUNKCI√ìK ===

// Jelsz√≥v√°ltoztat√°s modal megnyit√°sa
function openChangePasswordModal() {
    console.log('üîê Jelsz√≥v√°ltoztat√°s modal megnyit√°sa...');
    console.log('currentUser:', currentUser);
    
    if (!currentUser) {
        console.log('‚ùå Nincs bejelentkezve!');
        showMessage('El≈ëbb jelentkezz be!', 'warning');
        return;
    }
    
    const modal = document.getElementById('changePasswordModal');
    console.log('Modal elem:', modal);
    
    if (!modal) {
        console.error('‚ùå changePasswordModal nem tal√°lhat√≥!');
        showMessage('Hiba: a jelsz√≥v√°ltoztat√°s modal nem tal√°lhat√≥', 'error');
        return;
    }
    
    modal.style.display = 'block';
    console.log('‚úÖ Modal megjelen√≠tve');
    
    // Mez≈ëk √ºr√≠t√©se
    document.getElementById('currentPassword').value = '';
    document.getElementById('newPassword').value = '';
    document.getElementById('confirmPassword').value = '';
    
    // √úzenet elrejt√©se
    const messageEl = document.getElementById('changePasswordMessage');
    if (messageEl) {
        messageEl.style.display = 'none';
    }
    
    setTimeout(() => {
        document.getElementById('currentPassword').focus();
    }, 300);
}

// Jelsz√≥v√°ltoztat√°s modal bez√°r√°sa
function closeChangePasswordModal() {
    console.log('üîê Jelsz√≥v√°ltoztat√°s modal bez√°r√°sa');
    const modal = document.getElementById('changePasswordModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

async function changePassword() {
    try {
        if (!currentUser) {
            showChangePasswordMessage('Nincs bejelentkezve!', 'error');
            return;
        }
        
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (!currentPassword || !newPassword || !confirmPassword) {
            showChangePasswordMessage('Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!', 'error');
            return;
        }
        
        if (newPassword !== confirmPassword) {
            showChangePasswordMessage('Az √∫j jelszavak nem egyeznek!', 'error');
            return;
        }
        
        if (newPassword.length < 4) {
            showChangePasswordMessage('Az √∫j jelsz√≥ legal√°bb 4 karakter hossz√∫ legyen!', 'error');
            return;
        }
        
        // Jelenlegi jelsz√≥ ellen≈ërz√©se
        const { data: users, error: checkError } = await supabase
            .from('app_users')
            .select('*')
            .eq('username', currentUser.username);
        
        if (checkError || !users || users.length === 0) {
            showChangePasswordMessage('Hiba t√∂rt√©nt az ellen≈ërz√©s sor√°n!', 'error');
            return;
        }
        
        const user = users[0];
        
        // Base64 ellen≈ërz√©s
        if (user.password_hash !== btoa(currentPassword)) {
            showChangePasswordMessage('A jelenlegi jelsz√≥ nem megfelel≈ë!', 'error');
            return;
        }
        
        // √öj jelsz√≥ hash-el√©se (base64)
        const newPasswordHash = btoa(newPassword);
        
        // Jelsz√≥ friss√≠t√©se
        const { error: updateError } = await supabase
            .from('app_users')
            .update({ 
                password_hash: newPasswordHash
            })
            .eq('username', currentUser.username);
        
        if (updateError) {
            console.error('Jelsz√≥v√°ltoztat√°s hiba:', updateError);
            showChangePasswordMessage('Hiba t√∂rt√©nt a jelsz√≥ megv√°ltoztat√°sa sor√°n: ' + updateError.message, 'error');
        } else {
            showChangePasswordMessage('‚úÖ Jelsz√≥ sikeresen megv√°ltoztatva!', 'success');
            
            setTimeout(() => {
                closeChangePasswordModal();
                showMessage('Jelsz√≥ sikeresen megv√°ltoztatva!', 'success');
            }, 2000);
        }
        
    } catch (error) {
        console.error('changePassword hiba:', error);
        showChangePasswordMessage('V√°ratlan hiba t√∂rt√©nt!', 'error');
    }
}

// Event listener-ek a modalokhoz
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Jelsz√≥v√°ltoztat√°s event listener-ek be√°ll√≠t√°sa...');
    
    // Enter billenty≈± kezel√©se a jelsz√≥v√°ltoztat√°s modalban
    const changePasswordModal = document.getElementById('changePasswordModal');
    if (changePasswordModal) {
        console.log('‚úÖ changePasswordModal elem megtal√°lva');
        const inputs = changePasswordModal.querySelectorAll('input[type="password"]');
        inputs.forEach(input => {
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    console.log('Enter lenyomva a jelsz√≥v√°ltoztat√°sban');
                    changePassword();
                }
            });
        });
    } else {
        console.error('‚ùå changePasswordModal elem nem tal√°lhat√≥!');
    }
    
    // Modal bez√°r√°s kattint√°sra
    document.addEventListener('click', function(event) {
        const editModal = document.getElementById('editSaleModal');
        if (event.target === editModal) {
            closeEditModal();
        }
        
        const changePasswordModal = document.getElementById('changePasswordModal');
        if (event.target === changePasswordModal) {
            console.log('üìå Modal bez√°r√°sa kattint√°sra');
            closeChangePasswordModal();
        }
        
        const badgeModal = document.getElementById('badgeModal');
        if (event.target === badgeModal) {
            closeBadgeModal();
        }
        
        const kickedMembersModal = document.getElementById('kickedMembersModal');
        if (event.target === kickedMembersModal) {
            closeKickedMembersModal();
        }
    });
});

// Profit sz√°mol√≥ input esem√©ny
document.addEventListener('DOMContentLoaded', function() {
  const salePriceInput = document.getElementById('editSalePrice');
  if (salePriceInput) {
    salePriceInput.addEventListener('input', function() {
      formatInputPrice(this);
      updateProfitCalculator();
    });
  }
});

// ... megl√©v≈ë k√≥d ...

// Gal√©ria √°r m√≥dos√≠t√°s modal event listener
document.addEventListener('click', function(event) {
    // ... megl√©v≈ë k√≥d ...
    
    const editGalleryPriceModal = document.getElementById('editGalleryPriceModal');
    if (event.target === editGalleryPriceModal) {
        closeEditGalleryPriceModal();
    }
});

// Gal√©ria √°r input form√°z√°sa
document.addEventListener('DOMContentLoaded', function() {
  const galleryPriceInput = document.getElementById('editGalleryPrice');
  if (galleryPriceInput) {
    galleryPriceInput.addEventListener('input', function() {
      formatInputPrice(this);
    });
  }
});
// Event listener-ek a modalokhoz
document.addEventListener('click', function(event) {
    // ... megl√©v≈ë k√≥d ...
    
    const editTuningModal = document.getElementById('editTuningModal');
    if (event.target === editTuningModal) {
        closeEditTuningModal();
    }
});

// Tuning √°r input form√°z√°sa
document.addEventListener('DOMContentLoaded', function() {
  const tuningPPInput = document.getElementById('editTuningPPPrice');
  const tuningPriceInput = document.getElementById('editTuningPrice');
  
  if (tuningPPInput) {
    tuningPPInput.addEventListener('input', function() {
      formatInputPrice(this);
    });
  }
  
  if (tuningPriceInput) {
    tuningPriceInput.addEventListener('input', function() {
      formatInputPrice(this);
    });
  }
});

// √År m√≥dos√≠t√°s modal megnyit√°sa
function openEditGalleryPriceModal(carId, currentBasePrice, currentSalePrice) {
  if (!currentUser) {
    showGalleryMessage('Bejelentkez√©s sz√ºks√©ges!', 'warning');
    return;
  }

  // Aktu√°lis aut√≥ adatainak bet√∂lt√©se
  const car = allCars.find(c => c.id === carId) || {};
  
  // Modal tartalom felt√∂lt√©se
  document.getElementById('editGalleryCarId').value = carId;
  document.getElementById('editGalleryCarModel').textContent = car.model || 'Ismeretlen modell';
  
  // √Årak form√°z√°sa
  const formattedBasePrice = currentBasePrice ? new Intl.NumberFormat('hu-HU').format(currentBasePrice) : '';
  const formattedSalePrice = currentSalePrice ? new Intl.NumberFormat('hu-HU').format(currentSalePrice) : '';
  
  document.getElementById('editGalleryBasePrice').value = formattedBasePrice;
  document.getElementById('editGalleryPrice').value = formattedSalePrice;
  
  // Modal megjelen√≠t√©se
  document.getElementById('editGalleryPriceModal').style.display = 'block';
  
  // Input f√≥kusz
  setTimeout(() => {
    document.getElementById('editGalleryBasePrice').focus();
  }, 300);
}

// √År m√≥dos√≠t√°s ment√©se
async function saveGalleryPrice() {
  try {
    const carId = document.getElementById('editGalleryCarId').value;
    const newBasePrice = document.getElementById('editGalleryBasePrice').value.replace(/[^\d]/g, '');
    const newSalePrice = document.getElementById('editGalleryPrice').value.replace(/[^\d]/g, '');
    
    if (!carId) {
      showGalleryMessage('Aut√≥ azonos√≠t√≥ hi√°nyzik!', 'error');
      return;
    }
    
    if (!newSalePrice) {
      showGalleryMessage('Add meg az elad√°si √°rat!', 'warning');
      return;
    }
    
    const salePriceValue = parseInt(newSalePrice);
    if (isNaN(salePriceValue) || salePriceValue <= 0) {
      showGalleryMessage('√ârv√©nyes elad√°si √°rat adj meg!', 'error');
      return;
    }

    // Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥nak joga van m√≥dos√≠tani
    const { data: car, error: carError } = await supabase
      .from('cars')
      .select('*')
      .eq('id', carId)
      .single();

    if (carError || !car) {
      showGalleryMessage('Aut√≥ nem tal√°lhat√≥!', 'error');
      return;
    }

    if (car.added_by !== currentUser.tagName && currentUser.role !== 'admin') {
      showGalleryMessage('Csak a saj√°t aut√≥dat m√≥dos√≠thatod!', 'error');
      return;
    }

    // √Årak friss√≠t√©se
    const updateData = {
      sale_price: salePriceValue,
      updated_at: new Date().toISOString()
    };

    // Csak akkor adjuk hozz√° az alap √°rat, ha meg van adva
    if (newBasePrice) {
      updateData.base_price = parseInt(newBasePrice);
    } else {
      updateData.base_price = null;
    }

    const { error } = await supabase
      .from('cars')
      .update(updateData)
      .eq('id', carId);

    if (error) {
      showGalleryMessage('Hiba t√∂rt√©nt az √°r m√≥dos√≠t√°sa sor√°n: ' + error.message, 'error');
    } else {
      showGalleryMessage('‚úÖ √Årak sikeresen m√≥dos√≠tva!', 'success');
      closeEditGalleryPriceModal();
      loadCarGallery(); // Friss√≠tj√ºk a t√°bl√°zatot
    }
    
  } catch (error) {
    console.error('saveGalleryPrice hiba:', error);
    showGalleryMessage('Hiba t√∂rt√©nt az √°r m√≥dos√≠t√°sa sor√°n', 'error');
  }
}
// Gal√©ria ≈±rlap t√∂rl√©se
function clearGalleryForm() {
  document.getElementById('galleryModelSearch').value = '';
  document.getElementById('galleryBasePrice').value = '';
  document.getElementById('galleryPrice').value = '';
  clearGalleryImage();
}